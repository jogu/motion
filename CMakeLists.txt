project(motion)
cmake_minimum_required(VERSION 2.8)
include(CheckIncludeFiles)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -Wall")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

execute_process(COMMAND sh "${CMAKE_CURRENT_SOURCE_DIR}/version.sh" OUTPUT_VARIABLE VERSION)
set(BIN_PATH "${CMAKE_INSTALL_PREFIX}/bin")
set(sysconfdir "/etc" CACHE STRING "system configuration directory")
set(PACKAGE_NAME "motion" CACHE STRING "package name")
set(PACKAGE_VERSION ${VERSION} CACHE STRING "package version")

find_package(PkgConfig REQUIRED)
find_package(JPEG REQUIRED)
find_package(MMAL)
find_package(MySQL)
find_package(PostgreSQL)
find_package(SDL)
find_package(Threads)
pkg_check_modules(FFMPEG libavutil libavformat libavcodec libswscale)
pkg_check_modules(SQLITE3 sqlite3)

option(WITH_FFMPEG "enable FFMPEG" ${FFMPEG_FOUND})
option(WITH_MMAL "enable MMAL" ${MMAL_FOUND})
option(WITH_MYSQL "enable MYSQL" ${MYSQL_FOUND})
option(WITH_PGSQL "enable PGSQL" ${PostgreSQL_FOUND})
option(WITH_PTHREAD "enable PTHREAD" ${Threads_FOUND})
option(WITH_SDL "enable SDL" ${SDL_FOUND})
option(WITH_SQLITE3 "enable SQLITE3" ${SQLITE3_FOUND})

set(HAVE_FFMPEG ${WITH_FFMPEG})
set(HAVE_MMAL ${WITH_MMAL})
set(HAVE_MYSQL ${WITH_MYSQL})
set(HAVE_PGSQL ${WITH_PGSQL})
set(HAVE_PTHREAD ${WITH_PTHREAD})
set(HAVE_SDL ${WITH_SDL})
set(HAVE_SQLITE3 ${WITH_SQLITE3})
check_include_files("linux/videodev.h" HAVE_LINUX_VIDEODEV_H)
check_include_files("linux/videodev2.h" HAVE_LINUX_VIDEODEV2_H)
check_include_files("sys/videoio.h" HAVE_SYS_VIDEOIO_H)

configure_file(config.h.in "${CMAKE_CURRENT_SOURCE_DIR}/config.h")
configure_file(motion-dist.conf.in motion-dist.conf)
configure_file(camera1-dist.conf.in camera1-dist.conf)
configure_file(camera2-dist.conf.in camera2-dist.conf)
configure_file(camera3-dist.conf.in camera3-dist.conf)
configure_file(camera4-dist.conf.in camera4-dist.conf)
configure_file(motion.service.in motion.service)
configure_file(motion.spec.in motion.spec)
configure_file(motion.init-Debian.in motion.init-Debian)
configure_file(motion.init-FreeBSD.sh.in motion.init-FreeBSD.sh)


list(APPEND SRC_FILES conf.c)
list(APPEND SRC_FILES motion.c)
list(APPEND SRC_FILES alg.c)
list(APPEND SRC_FILES draw.c)
list(APPEND SRC_FILES event.c)
list(APPEND SRC_FILES ffmpeg.c)
list(APPEND SRC_FILES jpegutils.c)
list(APPEND SRC_FILES logger.c)
list(APPEND SRC_FILES md5.c)
list(APPEND SRC_FILES netcam.c)
list(APPEND SRC_FILES netcam_ftp.c)
list(APPEND SRC_FILES netcam_jpeg.c)
list(APPEND SRC_FILES netcam_rtsp.c)
list(APPEND SRC_FILES netcam_wget.c)
list(APPEND SRC_FILES picture.c)
list(APPEND SRC_FILES rotate.c)
list(APPEND SRC_FILES stream.c)
list(APPEND SRC_FILES track.c)
list(APPEND SRC_FILES video2.c)
list(APPEND SRC_FILES video.c)
list(APPEND SRC_FILES video_common.c)
list(APPEND SRC_FILES vloopback_motion.c)
list(APPEND SRC_FILES webhttpd.c)
if(BSD) #TODO: TEST
	list(APPEND SRC_FILES video_freebsd.c)
endif(BSD) #TODO: TEST

include_directories(${JPEG_INCLUDE_DIR})
list(APPEND LINK_LIBRARIES ${JPEG_LIBRARIES})

if(WITH_FFMPEG)
	pkg_check_modules(FFMPEG REQUIRED libavutil libavformat libavcodec libswscale)
	include_directories(${FFMPEG_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${FFMPEG_LIBRARIES})
endif(WITH_FFMPEG)
if(WITH_MYSQL)
	find_package(MySQL REQUIRED)
	include_directories(${MYSQL_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${MYSQL_LIBRARIES})
endif(WITH_MYSQL)
if(WITH_PTHREAD)
	find_package(Threads REQUIRED)
	list(APPEND LINK_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
endif(WITH_PTHREAD)
if(WITH_PGSQL)
	find_package(PostgreSQL REQUIRED)
	include_directories(${PostgreSQL_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${PostgreSQL_LIBRARIES})
endif(WITH_PGSQL)
if(WITH_SQLITE3)
	pkg_check_modules(SQLITE3 REQUIRED sqlite3)
	include_directories(${SQLITE3_INCLUDE_DIRS})
	list(APPEND LINK_LIBRARIES ${SQLITE3_LIBRARIES})
endif(WITH_SQLITE3)
if(WITH_SDL)
	find_package(SDL REQUIRED)
	include_directories(${SDL_INCLUDE_DIR})
	list(APPEND SRC_FILES sdl.c)
	list(APPEND LINK_LIBRARIES ${SDL_LIBRARY})
endif(WITH_SDL)
if(WITH_MMAL)
	find_package(MMAL REQUIRED)
	list(APPEND SRC_FILES mmalcam.c)
endif(WITH_MMAL)

add_executable(motion ${SRC_FILES})
target_link_libraries(motion ${LINK_LIBRARIES})
